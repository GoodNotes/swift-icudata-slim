#!/usr/bin/env python3
import json
import os
import subprocess
from pathlib import Path

ICU_VERSIONS_FILE = Path(__file__).parent.parent / "icu-versions.json"
PACKAGE_SCRIPT = Path(__file__).parent / "package-icudata.py"
OUTPUT_BASE = Path(__file__).parent.parent / "Sources"

def build_with_filter(filter_json: Path, filter_name: str, versions: dict):
    print(f"Building with filter {filter_json}")
    icu_versions = set(versions["swift-icu-versions"].values())
    build_dir = Path(__file__).parent.parent / ".build" / "icu"

    for icu_version in icu_versions:
        out_dir = OUTPUT_BASE / f"icudata/{icu_version}"
        out_dir.mkdir(parents=True, exist_ok=True)
        out_c = out_dir / filter_name / "icudata.c"
        print(f"Building ICU data {icu_version} -> {out_c}")
        if out_c.exists():
            print(f"Skipping {out_c} because it already exists")
            continue
        
        args = [
            "python3", str(PACKAGE_SCRIPT),
            "--icu-version", icu_version,
            "--filter-json", str(filter_json),
            "--output", str(out_c),
            "--build-dir", str(build_dir / filter_name)
        ]
        print(f"Running {' '.join(args)}")
        subprocess.run(args, check=True)
    
    for swift_version in versions["swift-icu-versions"]:
        icu_version = versions["swift-icu-versions"][swift_version]
        out_dir = OUTPUT_BASE / f"ICUDataSlim_{swift_version.replace('.', '_')}" / filter_name
        out_dir.mkdir(parents=True, exist_ok=True)
        out_c = out_dir / "icudata.c"
        print(f"Generating C source file for Swift {swift_version} -> {out_c}")
        with open(out_c, "w") as f:
            f.write(f"// Generated by build-all.py\n")
            f.write(f"#include \"../../icudata/{icu_version}/{filter_name}/icudata.c\"\n")
        
        out_empty_h = out_dir / "include" / "empty.h"
        out_empty_h.parent.mkdir(parents=True, exist_ok=True)
        out_empty_h.touch()


def main():
    with open(ICU_VERSIONS_FILE) as f:
        versions = json.load(f)
    
    filters_dir = Path(__file__).parent / "filters"
    for filter_file in filters_dir.glob("*.json"):
        build_with_filter(filter_file, filter_file.stem, versions)

if __name__ == "__main__":
    main()
